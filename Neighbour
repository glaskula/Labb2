import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.paint.Color;
import javafx.stage.Stage;


import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

import static java.lang.Math.round;
import static java.lang.Math.sqrt;
import static java.lang.System.*;

/*
 *  Program to simulate segregation.
 *  See : http://nifty.stanford.edu/2014/mccown-schelling-model-segregation/
 *
 * NOTE:
 * - JavaFX first calls method init() and then method start() far below.
 * - To test uncomment call to test() first in init() method!
 *
 */
// Extends Application because of JavaFX (just accept for now)
public class Neighbours extends Application {
    final static Random rand = new Random();
    class Actor {
         Color color;        // Color an existing JavaFX class
        boolean isSatisfied;      // false by default

        Actor(Color color) {      // Constructor to initialize
            this.color = color;
        }
    }

    // Below is the *only* accepted instance variable (i.e. variables outside any method)
    // This variable may *only* be used in methods init() and updateWorld()
    Actor[][] world;              // The world is a square matrix of Actors

    // This is the method called by the timer to update the world
    // (i.e move unsatisfied) approx each 1/60 sec.
    void updateWorld() {
        // % of surrounding neighbours that are like me
        double threshold = 0.5;

        // TODO update world
        isAllSatisfied(world,threshold);
        Integer[] array1 = getFree(world);
        Integer[] array2 = getUnsatisfied(world);
        move(world,array1,array2);

    }

    // This method initializes the world variable with a random distribution of Actors
    // Method automatically called by JavaFX runtime
    // That's why we must have "@Override" and "public" (just accept for now)
    @Override
    public void init() {
        //test();    // <---------------- Uncomment to TEST!

        // %-distribution of RED, BLUE and NONE
        double[] dist = {0.25, 0.25, 0.50};
        // Number of locations (places) in world (must be a square)
        int nLocations = 900;   // Should also try 90 000

        // TODO initialize the world
        Actor[] arr = generateDistribution(nLocations,dist[0],dist[1],dist[2]);
        shuffle(arr);
        world = toMatrix(arr);

        // Should be last
        fixScreenSize(nLocations);
    }

    // ---------------  Methods ------------------------------

    // TODO Many ...
    Actor[] generateDistribution(int size,double red, double blue, double noll){
        Actor[] world = new Actor[size];

        for (int i = 0; i < (int)Math.round(size*blue); i++) {
            world[i] = new Actor(Color.BLUE);
        }
        for (int i = 0; i < (int)Math.round(size*red); i++) {
            world[(int) Math.round((i+(size*blue)))] = new Actor(Color.RED);
        }
        for (int i = 0; i < (int)Math.round(size*noll); i++) {
            world[(int) Math.round((i+(size*blue)+(size*red)))] = null;
        }
        return world;
    }

    <T> void shuffle(T[] arr) {
        for (int i = arr.length; i > 1; i--) {
            int j = rand.nextInt(i);
            T tmp = arr[j];
            arr[j] = arr[i - 1];
            arr[i - 1] = tmp;
        }
    }

    Actor[][] toMatrix(Actor[]m) {
        Actor[][]tmpArr = new Actor [(int) sqrt(m.length)][(int) sqrt(m.length)];
        int k = 0;
        for (int row = 0; row < tmpArr.length; row++) {
            for (int col = 0; col < tmpArr[row].length; col++) {
                tmpArr[row][col] = m[k];
                k++;
            }
        }
        return tmpArr;
    }

    void isAllSatisfied(Actor[][] m,double threshold) {
        for (int row = 0; row < m.length; row++) {
            for (int col = 0; col < m[row].length; col++) {
                if(m[row][col] != null) {
                    m[row][col].isSatisfied = isItSatisfied(m, row, col, threshold);
                }
            }
        }
    }

    boolean isItSatisfied(Actor[][] m, int r, int c, double threshold){
        int nrColor1 = 0;
        int nrColor2 = 0;
        int rowStart = r;
        int colStart = c;
        int limit = 2;
        int start = 1;
        for (int row = r - start; row < (r+limit); row++) {
            for (int col = c - start; col < (c+limit); col++) {
                if ((isValidLocation(m.length, row, col)) && (m[row][col] != null)) {
                    if(m[row][col].color == m[rowStart][colStart].color){
                        nrColor1++;
                    }
                    else{
                        nrColor2++;
                    }
                }
            }
        }
        if(nrColor1 >= ((nrColor1+nrColor2)*threshold)){
            return true;
        }
        else{
            return false;
        }
    }

    Integer[] getUnsatisfied(Actor[][] m) {
        int k = 0;
        for (int row = 0; row < m.length; row++) {
            for (int col = 0; col < m[row].length; col++) {
                if ((m[row][col] != null) && !m[row][col].isSatisfied) {
                    k++;
                }
            }
        }
        Integer[] tmpArr = new Integer[k];
        int i = 0;
        for (int row = 0; row < m.length; row++) {
            for (int col = 0; col < m[row].length; col++) {
                if ((m[row][col] != null) && !m[row][col].isSatisfied) {
                    tmpArr[i] = row*m.length+col;
                    i++;
                }
            }
        }
        return tmpArr;
    }

    Integer[] getFree(Actor[][] m) {
        int k = 0;
        for (int row = 0; row < m.length; row++) {
            for (int col = 0; col < m[row].length; col++) {
                if (m[row][col] == null) {
                    k++;
                }
            }
        }
        Integer[] tmpArr = new Integer[k];
        int i = 0;
        for (int row = 0; row < m.length; row++) {
            for (int col = 0; col < m[row].length; col++) {
                if (m[row][col] == null) {
                    tmpArr[i] = row*m.length+col;
                    i++;
                }
            }
        }
        return tmpArr;
    }

    int getRowIndex (Integer a, Actor[][] m){
        return a / m.length;
    }
    int getColIndex (Integer a, Actor[][] m){
        return a % m.length;
    }

    void move (Actor[][] m, Integer[] freePosition, Integer[] unsatisfied) {
        for (int i = 0; i < unsatisfied.length; i++){
            m[getRowIndex(freePosition[i], m)][getColIndex(freePosition[i], m)] = m[getRowIndex(unsatisfied[i], m)][getColIndex(unsatisfied[i], m)];
            m[getRowIndex(unsatisfied[i], m)][getColIndex(unsatisfied[i], m)] = null;
        }
    }

    // Check if inside world
    boolean isValidLocation(int size, int row, int col) {
        return 0 <= row && row < size && 0 <= col && col < size;
    }

    // ----------- Utility methods -----------------

    // TODO (general method possible reusable elsewhere)

    // ------- Testing -------------------------------------

    // Here you run your tests i.e. call your logic methods
    // to see that they really work. Important!!!!
    void test() {
        // A small hard coded world for testing
        Actor[][] testWorld = new Actor[][]{
                {new Actor(Color.RED), new Actor(Color.RED), null},
                {null, new Actor(Color.BLUE), null},
                {new Actor(Color.RED), null, new Actor(Color.BLUE)}
        };
        double th = 0.5;   // Simple threshold used for testing

        int size = testWorld.length;
        out.println(isItSatisfied(testWorld,2,2,th));

        // TODO

        exit(0);
    }

    // ******************** NOTHING to do below this row, it's JavaFX stuff  **************

    double width = 500;   // Size for window
    double height = 500;
    final double margin = 50;
    double dotSize;

    void fixScreenSize(int nLocations) {
        // Adjust screen window
        dotSize = 9000 / nLocations;
        if (dotSize < 1) {
            dotSize = 2;
        }
        width = sqrt(nLocations) * dotSize + 2 * margin;
        height = width;
    }

    long lastUpdateTime;
    final long INTERVAL = 450_000_000;


    @Override
    public void start(Stage primaryStage) throws Exception {

        // Build a scene graph
        Group root = new Group();
        Canvas canvas = new Canvas(width, height);
        root.getChildren().addAll(canvas);
        GraphicsContext gc = canvas.getGraphicsContext2D();

        // Create a timer
        AnimationTimer timer = new AnimationTimer() {
            // This method called by FX, parameter is the current time
            public void handle(long now) {
                long elapsedNanos = now - lastUpdateTime;
                if (elapsedNanos > INTERVAL) {
                    updateWorld();
                    renderWorld(gc);
                    lastUpdateTime = now;
                }
            }
        };

        Scene scene = new Scene(root);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Simulation");
        primaryStage.show();

        timer.start();  // Start simulation
    }


    // Render the state of the world to the screen
    public void renderWorld(GraphicsContext g) {
        g.clearRect(0, 0, width, height);
        int size = world.length;
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                int x = (int) (dotSize * col + margin);
                int y = (int) (dotSize * row + margin);
                if (world[row][col] != null) {
                    g.setFill(world[row][col].color);
                    g.fillOval(x, y, dotSize, dotSize);
                }
            }
        }
    }

    public static void main(String[] args) {

        launch(args);
    }

}
